openapi: 3.1.0
info:
  title: to do list - OpenAPI 3.1
  description: |-
    This is a to do list server based on roadmap.sh's project specifications.
    Find out more at: 
      https://roadmap.sh/projects/todo-list-api
    
    Useful links:
    - [to do list repository](https://github.com/jocelynzaman/Roadmap-Todo-List-API)

  contact:
    email: jocelynzaman@gmail.com
  license:
    name: MIT
  version: 1.0.0
servers:
  - url: localhost:8094/
tags:
  - name: user authentication
    description: Sign up or log in to access to do list
paths:
  /register:
    post:
      tags:
        - user authentication
      summary: Register a new user
      description: Register a new user to access to do list
      operationId: registerUser
      requestBody:      
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      responses:
        '201':
          description: Successful 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Missing or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationException'
  /login:
    post:
      tags:
        - user authentication
      summary: Login existing user
      description: Login existing user to access to do list
      operationId: loginUser
      requestBody:
        description: Authenticate existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationException'
  /todos:
    post:
      tags:
        - to-do item
      summary: Create new to-do item
      description: Create new to-do item for user
      operationId: createTodos
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/Token'
          required: true
      requestBody:
        description: Create new to-do item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoItemRequest'
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationException'
    get:
      tags:
        - to-do item
      summary: List all to-do items
      description: List all to-do items with optional paging and limit
      operationId: getTodos
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/Token'
          required: true
        - in: query
          name: page
          description: set page number for list
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: limit
          description: set max number of to-do items to display
          schema:
            type: integer
            default: 5
          required: false
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItemList'
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationException'
  /todos/{todoId}:
    put:
      tags:
        - to-do item
      summary: Update an existing to-do item
      description: Update an existing to-do item by id
      operationId: updateTodos
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/Token'
          required: true
        - in: path
          name: todoId
          description: ID of to-do item to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Create new to-do item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoItemRequest'
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationException'
    delete:
      tags:
        - to-do item
      summary: Update an existing to-do item
      description: Update an existing to-do item by id
      operationId: removeTodos
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/Token'
          required: true
        - in: path
          name: todoId
          required: true
          description: ID of to-do item to update
          schema:
            type: integer
      responses:
        '204':
          description: Successful
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationException'

components:
  schemas:
    UserRegistrationRequest:
      type: object
      properties:
        name:
          type: string
          examples: ["Dipper Pines"]
        email:
          type: string
          examples: ["Dipper.Pines@gmail.com"]
        password:
          type: string
          examples: ["gravity"]
    Authentication:
      type: object
      properties:
        email:
          type: string
          examples: ["Dipper.Pines@gmail.com"]
        password:
          type: string
          examples: ["gravity"]
    Token:
      type: string
      examples: ["EewQoOTnJ7M6EuElcJZFgtssu"]
    TodoItemRequest:
      type: object
      properties:
        title:
          type: string
          examples: ["grocery"]
        description:
          type: string
          examples: ["milk and eggs"]
    TodoItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          examples: ["grocery"]
        description:
          type: string
          examples: ["milk and eggs"]
    TodoItemList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TodoItem'
        page:
          type: integer
          examples: [1]
        limit:
          type: integer
          examples: [5]
        total:
          type: integer
          examples: [3]
    RegistrationException:
      type: object
      properties:
        message:
          type: string
    AuthorizationException:
      type: object
      properties:
        message:
          type: string
  requestBodies:
    UserRegistrationRequest:
      description: User object that needs to be added to the application
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegistrationRequest'
    Authentication:
      description: Authentication details that needs to be validated by application
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authentication'
    TodoItemRequest:
      description: Todo object that needs to be added to the application
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TodoItemRequest'